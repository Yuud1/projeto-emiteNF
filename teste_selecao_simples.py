#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste simples de sele√ß√£o de boletos - Verifica se os boletos selecionados est√£o sendo processados na ordem correta
"""

import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_selecao_boletos():
    """Testa a l√≥gica de sele√ß√£o de boletos"""
    
    # Simular dados de teste (p√°ginas 1 a 10)
    dados_teste = []
    for i in range(1, 11):  # P√°ginas 1 a 10
        dados_teste.append({
            'indice': i,
            'pagina': i,
            'cpf_cnpj': f'1234567890{i:02d}',
            'nome_cliente': f'Cliente Teste {i}',
            'endereco': f'Endere√ßo Teste {i}, Palmas/TO - 77016-640',
            'valor': 100.00 + i,
            'vencimento': '10/07/2025',
            'descricao': f'MENSALIDADE: {i:06d} - Cliente {i} - TURMA: G1MA'
        })
    
    logger.info("=== DADOS DE TESTE CRIADOS ===")
    logger.info(f"Total de p√°ginas: {len(dados_teste)}")
    logger.info(f"√çndices: {[d['indice'] for d in dados_teste]}")
    
    # Simular sele√ß√£o das p√°ginas 3 e 5 (como no caso real)
    indices_selecionados = [3, 5]  # P√°ginas 3 e 5
    
    logger.info(f"\n=== SIMULANDO SELE√á√ÉO ===")
    logger.info(f"√çndices selecionados: {indices_selecionados}")
    
    # Obter dados selecionados
    selected_data = []
    for idx in indices_selecionados:
        if 1 <= idx <= len(dados_teste):
            selected_data.append(dados_teste[idx - 1])  # -1 porque √≠ndices come√ßam em 1
    
    logger.info(f"\n=== DADOS SELECIONADOS ===")
    logger.info(f"Total de boletos selecionados: {len(selected_data)}")
    logger.info(f"√çndices dos dados selecionados: {[d['indice'] for d in selected_data]}")
    
    # Simular o processamento (nova l√≥gica corrigida)
    logger.info(f"\n=== SIMULANDO PROCESSAMENTO (L√ìGICA CORRIGIDA) ===")
    
    # Criar lista de tuplas (√≠ndice_real, dados) para manter os √≠ndices originais
    boletos_para_processar = []
    for idx, dados in enumerate(selected_data):
        # Obter o √≠ndice real
        indice_real = dados['indice']
        boletos_para_processar.append((indice_real, dados))
    
    logger.info(f"Boletos para processar: {[(idx, dados['nome_cliente']) for idx, dados in boletos_para_processar]}")
    
    # Simular o loop de processamento
    total_boletos = len(selected_data)
    for posicao, (indice_real, dados) in enumerate(boletos_para_processar, 1):
        logger.info(f"\n--- PROCESSANDO BOLETO {posicao}/{total_boletos} (√çndice original: {indice_real}) ---")
        logger.info(f"Cliente: {dados['nome_cliente']}")
        logger.info(f"CPF/CNPJ: {dados['cpf_cnpj']}")
        logger.info(f"Valor: {dados['valor']}")
        
        # Simular navega√ß√£o apenas no primeiro
        if posicao == 1:
            logger.info("üîÑ Primeiro boleto - navegando para nova NFSe...")
        else:
            logger.info(f"üîÑ Boleto {posicao} - usando nota j√° criada...")
        
        # Simular processamento
        logger.info("‚úÖ Boleto processado com sucesso!")
        
        # Simular prepara√ß√£o da pr√≥xima nota (se n√£o for o √∫ltimo)
        if posicao < total_boletos:
            logger.info("üîÑ Preparando pr√≥xima nota...")
    
    logger.info(f"\n=== RESULTADO ESPERADO ===")
    logger.info("‚úÖ O primeiro boleto (p√°gina 3) deve navegar para nova NFSe")
    logger.info("‚úÖ O segundo boleto (p√°gina 5) deve usar a nota j√° criada")
    logger.info("‚úÖ Ambos os boletos devem ser processados na ordem correta")

def test_selecao_boletos_antiga():
    """Testa a l√≥gica antiga (com problema) para compara√ß√£o"""
    
    logger.info(f"\n=== TESTE DA L√ìGICA ANTIGA (COM PROBLEMA) ===")
    
    # Simular dados selecionados
    dados_teste = []
    for i in range(1, 11):
        dados_teste.append({
            'indice': i,
            'pagina': i,
            'cpf_cnpj': f'1234567890{i:02d}',
            'nome_cliente': f'Cliente Teste {i}',
            'endereco': f'Endere√ßo Teste {i}, Palmas/TO - 77016-640',
            'valor': 100.00 + i,
            'vencimento': '10/07/2025',
            'descricao': f'MENSALIDADE: {i:06d} - Cliente {i} - TURMA: G1MA'
        })
    
    # Simular sele√ß√£o das p√°ginas 3 e 5
    indices_selecionados = [3, 5]
    selected_data = []
    for idx in indices_selecionados:
        if 1 <= idx <= len(dados_teste):
            selected_data.append(dados_teste[idx - 1])
    
    logger.info(f"√çndices selecionados: {indices_selecionados}")
    logger.info(f"√çndices dos dados selecionados: {[d['indice'] for d in selected_data]}")
    
    # Simular a l√≥gica antiga (problem√°tica)
    total_boletos = len(selected_data)
    for index, dados in enumerate(selected_data, 1):
        logger.info(f"\n--- PROCESSANDO BOLETO {index}/{total_boletos} ---")
        logger.info(f"Cliente: {dados['nome_cliente']}")
        logger.info(f"CPF/CNPJ: {dados['cpf_cnpj']}")
        logger.info(f"Valor: {dados['valor']}")
        
        # Simular navega√ß√£o apenas no primeiro
        if index == 1:
            logger.info("üîÑ Primeiro boleto - navegando para nova NFSe...")
        else:
            logger.info(f"üîÑ Boleto {index} - usando nota j√° criada...")
        
        logger.info("‚úÖ Boleto processado com sucesso!")
    
    logger.info(f"\n=== PROBLEMA DA L√ìGICA ANTIGA ===")
    logger.info("‚ùå O enumerate(selected_data, 1) reinicia a numera√ß√£o")
    logger.info("‚ùå Perde-se a informa√ß√£o do √≠ndice original")
    logger.info("‚ùå N√£o √© poss√≠vel identificar qual p√°gina real est√° sendo processada")

if __name__ == "__main__":
    logger.info("üß™ INICIANDO TESTES DE SELE√á√ÉO DE BOLETOS")
    
    # Testar l√≥gica antiga (com problema)
    test_selecao_boletos_antiga()
    
    # Testar l√≥gica nova (corrigida)
    test_selecao_boletos()
    
    logger.info("\nüéâ TESTES CONCLU√çDOS!")
    logger.info("A l√≥gica corrigida deve mostrar os √≠ndices originais corretamente") 