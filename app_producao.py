#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Emite Nota - Aplica√ß√£o de Produ√ß√£o
Vers√£o standalone para distribui√ß√£o local
"""

import sys
import os
import logging
import traceback
from pathlib import Path
from datetime import datetime

# Configurar logging para produ√ß√£o
def setup_logging():
    """Configura o sistema de logging para produ√ß√£o"""
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    log_file = log_dir / f"app_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    return logging.getLogger(__name__)

def check_dependencies():
    """Verifica se todas as depend√™ncias est√£o dispon√≠veis"""
    required_modules = [
        'tkinter', 'selenium', 'pandas', 'openpyxl', 
        'dotenv', 'webdriver_manager', 'PIL'
    ]
    
    missing_modules = []
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        print("‚ùå M√≥dulos faltando:")
        for module in missing_modules:
            print(f"   - {module}")
        print("\nüì¶ Instale as depend√™ncias:")
        print("   pip install -r requirements.txt")
        return False
    
    return True

def check_config_files():
    """Verifica se os arquivos de configura√ß√£o existem"""
    # Sempre usar o diret√≥rio atual onde o execut√°vel est√° rodando
    base_dir = Path.cwd()
    
    # Para arquivos de configura√ß√£o do sistema, usar o diret√≥rio do execut√°vel
    if getattr(sys, 'frozen', False):
        # Executando como execut√°vel
        config_dir = Path(sys._MEIPASS) / 'config'
    else:
        # Executando como script Python
        config_dir = base_dir / 'config'
    
    required_files = [
        base_dir / '.env',  # .env sempre no diret√≥rio atual
        config_dir / 'settings.py',
        config_dir / 'field_mappings.json',
        config_dir / 'cnae_mappings.json'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not file_path.exists():
            missing_files.append(str(file_path))
    
    if missing_files:
        print("‚ùå Arquivos de configura√ß√£o faltando:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        
        # Criar arquivo .env se n√£o existir
        if any('.env' in str(f) for f in missing_files):
            print("\nüìù Criando arquivo .env b√°sico...")
            create_basic_env()
        
        return False
    
    return True

def create_basic_env():
    """Cria um arquivo .env b√°sico se n√£o existir"""
    env_content = """# ========================================
# CONFIGURA√á√ïES DO EMITE NOTA
# ========================================
# 
# INSTRU√á√ïES:
# 1. Configure suas credenciais do WebISS abaixo
# 2. Salve o arquivo
# 3. Execute o aplicativo novamente
#
# ========================================

# Credenciais do WebISS (OBRIGAT√ìRIO)
WEBISS_USERNAME=seu_usuario_aqui
WEBISS_PASSWORD=sua_senha_aqui

# Configura√ß√µes de automa√ß√£o (OPCIONAL)
HEADLESS_MODE=false
TIMEOUT=10

# Configura√ß√µes de arquivos (OPCIONAL)
DATA_DIRECTORY=data
LOGS_DIRECTORY=logs
MAPPINGS_FILE=config/field_mappings.json

# ========================================
# EXEMPLO DE CONFIGURA√á√ÉO:
# WEBISS_USERNAME=07912296964
# WEBISS_PASSWORD=minha_senha_segura
# ========================================
"""
    
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print("‚úÖ Arquivo .env criado!")
    print("‚ö†Ô∏è  Configure suas credenciais no arquivo .env antes de usar")
    print("üí° Execute 'configurar.bat' para facilitar a configura√ß√£o")

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    # Configurar stdin se necess√°rio
    try:
        import sys
        if sys.stdin is None:
            sys.stdin = open('CONIN$', 'r')
    except:
        pass
    
    logger = setup_logging()
    
    try:
        print("üöÄ Iniciando Emite Nota - Vers√£o de Produ√ß√£o")
        print("=" * 50)
        
        # Verificar depend√™ncias
        print("üì¶ Verificando depend√™ncias...")
        if not check_dependencies():
            input("\nPressione Enter para sair...")
            return
        
        # Verificar arquivos de configura√ß√£o
        print("‚öôÔ∏è  Verificando configura√ß√µes...")
        if not check_config_files():
            print("\n‚ö†Ô∏è  Configure os arquivos faltantes e execute novamente")
            input("Pressione Enter para sair...")
            return
        
        # Verificar licen√ßa
        print("üîë Verificando licen√ßa...")
        from utils.license_checker import LicenseChecker
        license_checker = LicenseChecker()
        licenca_valida, mensagem = license_checker.verificar_licenca()
        
        if not licenca_valida:
            print(f"‚ùå {mensagem}")
            print("\nüìû Entre em contato com o suporte para renovar sua licen√ßa")
            input("Pressione Enter para sair...")
            return
        
        print(f"‚úÖ {mensagem}")
        
        print("‚úÖ Todas as verifica√ß√µes passaram!")
        print("\nüîÑ Iniciando interface gr√°fica...")
        
        # Importar componentes da aplica√ß√£o
        from config.settings import Settings
        from utils.data_processor import DataProcessor
        from webiss_automation import WebISSAutomation
        from gui.main_window import ModernMainWindow
        
        # Inicializar componentes
        settings = Settings()
        data_processor = DataProcessor()
        webiss_automation = WebISSAutomation
        
        # Criar e executar interface
        app = ModernMainWindow(data_processor, webiss_automation, settings)
        app.run()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Aplica√ß√£o interrompida pelo usu√°rio")
        logger.info("Aplica√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        error_msg = f"‚ùå Erro cr√≠tico na aplica√ß√£o: {e}"
        print(error_msg)
        logger.error(error_msg)
        logger.error(traceback.format_exc())
        
        print("\nüìã Detalhes do erro foram salvos no log")
        print("üí° Se o problema persistir, entre em contato com o suporte")
        
        input("\nPressione Enter para sair...")
    finally:
        logger.info("Aplica√ß√£o finalizada")

if __name__ == "__main__":
    main() 