#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Interface Gr√°fica Moderna - Emite Nota WebISS
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import threading
import logging
import time
import os
import pandas as pd
from pathlib import Path
import json
from datetime import datetime
import textwrap

logger = logging.getLogger(__name__)

class ModernMainWindow:
    """Janela principal moderna da aplica√ß√£o"""
    
    def __init__(self, data_processor, webiss_automation, settings):
        self.data_processor = data_processor
        self.webiss_automation = webiss_automation
        self.settings = settings
        
        # Configura√ß√£o da janela principal
        self.root = tk.Tk()
        self.root.title("Emite Nota - Automa√ß√£o WebISS")
        self.root.geometry("1200x800")
        self.root.configure(bg='#2c3e50')
        
        # Vari√°veis de controle
        self.processing = False
        self.current_data = None
        self.automation = None
        
        # Configurar interface
        self.setup_ui()
    
    def get_app_base_path(self):
        """Retorna o diret√≥rio base da aplica√ß√£o (execut√°vel ou script)"""
        import sys
        if getattr(sys, 'frozen', False):
            # Se √© um execut√°vel PyInstaller
            return os.path.dirname(sys.executable)
        else:
            # Se √© executado como script Python
            return os.getcwd()
        
    def setup_ui(self):
        """Configura a interface do usu√°rio moderna"""
        # Frame principal com gradiente
        main_frame = tk.Frame(self.root, bg='#2c3e50')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Header
        self.create_header(main_frame)
        
        # Container principal
        content_frame = tk.Frame(main_frame, bg='#34495e', relief=tk.RAISED, bd=2)
        content_frame.pack(fill=tk.BOTH, expand=True, pady=(20, 0))
        
        # Painel esquerdo - Status e Controles
        left_panel = tk.Frame(content_frame, bg='#34495e', width=400)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(20, 10), pady=20)
        left_panel.pack_propagate(False)
        
        # Painel direito - Log e Dados
        right_panel = tk.Frame(content_frame, bg='#34495e')
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(10, 20), pady=20)
        
        # Configurar pain√©is
        self.create_left_panel(left_panel)
        self.create_right_panel(right_panel)
        
    def create_header(self, parent):
        """Cria o cabe√ßalho da aplica√ß√£o"""
        header_frame = tk.Frame(parent, bg='#2c3e50')
        header_frame.pack(fill=tk.X, pady=(0, 20))
        
        # T√≠tulo principal
        title_label = tk.Label(header_frame, 
                              text="Emite Nota - Automa√ß√£o WebISS", 
                              font=('Segoe UI', 24, 'bold'),
                              fg='#ecf0f1',
                              bg='#2c3e50')
        title_label.pack()
        
        # Subt√≠tulo
        subtitle_label = tk.Label(header_frame,
                                 text="Processamento Autom√°tico de Boletos",
                                 font=('Segoe UI', 12),
                                 fg='#bdc3c7',
                                 bg='#2c3e50')
        subtitle_label.pack()
        
    def create_left_panel(self, parent):
        """Cria o painel esquerdo com status e controles"""
        # Status do Sistema
        status_frame = tk.LabelFrame(parent, text="Status do Sistema", 
                                   font=('Segoe UI', 12, 'bold'),
                                   fg='#ecf0f1', bg='#34495e',
                                   relief=tk.FLAT, bd=1)
        status_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Status dos dados
        self.data_status_label = tk.Label(status_frame, 
                                         text="‚ùå Dados n√£o carregados",
                                         font=('Segoe UI', 10),
                                         fg='#e74c3c', bg='#34495e')
        self.data_status_label.pack(anchor=tk.W, padx=10, pady=5)
        
        # Status do WebISS
        self.webiss_status_label = tk.Label(status_frame,
                                           text="‚ùå WebISS n√£o conectado",
                                           font=('Segoe UI', 10),
                                           fg='#e74c3c', bg='#34495e')
        self.webiss_status_label.pack(anchor=tk.W, padx=10, pady=5)
        
        # Controles Principais
        controls_frame = tk.LabelFrame(parent, text="Controles", 
                                     font=('Segoe UI', 12, 'bold'),
                                     fg='#ecf0f1', bg='#34495e',
                                     relief=tk.FLAT, bd=1)
        controls_frame.pack(fill=tk.X, pady=(0, 20))
        
        # Sele√ß√£o de pasta de PDFs
        pdf_folder_frame = tk.Frame(controls_frame, bg='#34495e')
        pdf_folder_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(pdf_folder_frame, text="Pasta com PDFs:", 
                 font=('Segoe UI', 10),
                 background='#34495e', foreground='#ecf0f1').pack(anchor=tk.W)
        
        folder_select_frame = tk.Frame(pdf_folder_frame, bg='#34495e')
        folder_select_frame.pack(fill=tk.X, pady=(5, 0))
        
        # Usar caminho absoluto para a pasta boletos baseado no diret√≥rio do execut√°vel
        boletos_path = os.path.join(self.get_app_base_path(), 'boletos')
        self.folder_var = tk.StringVar(value=boletos_path)
        self.folder_entry = tk.Entry(folder_select_frame, 
                                   textvariable=self.folder_var,
                                   font=('Segoe UI', 10),
                                   bg='#2c3e50', fg='#ecf0f1',
                                   relief=tk.FLAT, bd=1)
        self.folder_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        
        tk.Button(folder_select_frame,
                 text="üìÅ Procurar",
                 font=('Segoe UI', 9),
                 bg='#95a5a6', fg='white',
                 relief=tk.FLAT, padx=10, pady=5,
                 command=self.browse_folder).pack(side=tk.RIGHT)
        
        # Bot√£o Extrair PDFs
        self.extract_button = tk.Button(controls_frame,
                                       text="üìÑ Extrair Boletos PDF",
                                       font=('Segoe UI', 11),
                                       bg='#3498db', fg='white',
                                       relief=tk.FLAT, padx=20, pady=10,
                                       command=self.extract_pdfs)
        self.extract_button.pack(fill=tk.X, padx=10, pady=5)
        
        # Bot√£o Carregar Dados
        self.load_button = tk.Button(controls_frame,
                                    text="üìä Carregar Dados",
                                    font=('Segoe UI', 11),
                                    bg='#27ae60', fg='white',
                                    relief=tk.FLAT, padx=20, pady=10,
                                    command=self.load_data)
        self.load_button.pack(fill=tk.X, padx=10, pady=5)
        
        # Bot√£o Conectar WebISS
        self.connect_button = tk.Button(controls_frame,
                                       text="üîó Conectar WebISS",
                                       font=('Segoe UI', 11),
                                       bg='#f39c12', fg='white',
                                       relief=tk.FLAT, padx=20, pady=10,
                                       command=self.connect_webiss)
        self.connect_button.pack(fill=tk.X, padx=10, pady=5)
        
        # Bot√£o Iniciar Automa√ß√£o
        self.start_button = tk.Button(controls_frame,
                                     text="üöÄ Iniciar Automa√ß√£o",
                                     font=('Segoe UI', 11, 'bold'),
                                     bg='#e74c3c', fg='white',
                                     relief=tk.FLAT, padx=20, pady=10,
                                     command=self.start_automation)
        self.start_button.pack(fill=tk.X, padx=10, pady=5)
        
        # Bot√£o Parar
        self.stop_button = tk.Button(controls_frame,
                                    text="‚èπÔ∏è Parar Processamento",
                                    font=('Segoe UI', 11),
                                    bg='#95a5a6', fg='white',
                                    relief=tk.FLAT, padx=20, pady=10,
                                    command=self.stop_automation,
                                    state=tk.DISABLED)
        self.stop_button.pack(fill=tk.X, padx=10, pady=5)
        

        
        # Informa√ß√µes da Licen√ßa
        license_frame = tk.LabelFrame(parent, text="Licen√ßa", 
                                    font=('Segoe UI', 12, 'bold'),
                                    fg='#ecf0f1', bg='#34495e',
                                    relief=tk.FLAT, bd=1)
        license_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Status da licen√ßa
        self.license_status_label = tk.Label(license_frame,
                                            text="üîë Verificando licen√ßa...",
                                            font=('Segoe UI', 10),
                                            fg='#f39c12', bg='#34495e')
        self.license_status_label.pack(anchor=tk.W, padx=10, pady=5)
        
        # Informa√ß√µes da licen√ßa
        self.license_info_label = tk.Label(license_frame,
                                          text="",
                                          font=('Segoe UI', 9),
                                          fg='#bdc3c7', bg='#34495e')
        self.license_info_label.pack(anchor=tk.W, padx=10, pady=2)
        
        # Configura√ß√µes R√°pidas
        config_frame = tk.LabelFrame(parent, text="Configura√ß√µes", 
                                   font=('Segoe UI', 12, 'bold'),
                                   fg='#ecf0f1', bg='#34495e',
                                   relief=tk.FLAT, bd=1)
        config_frame.pack(fill=tk.X)
        
        # Modo Headless
        self.headless_var = tk.BooleanVar(value=self.settings.headless_mode)
        headless_check = tk.Checkbutton(config_frame,
                                       text="Modo Headless",
                                       font=('Segoe UI', 10),
                                       fg='#ecf0f1', bg='#34495e',
                                       selectcolor='#2c3e50',
                                       variable=self.headless_var)
        headless_check.pack(anchor=tk.W, padx=10, pady=5)
        
    def create_right_panel(self, parent):
        """Cria o painel direito com log e dados"""
        # Abas
        notebook = ttk.Notebook(parent)
        notebook.pack(fill=tk.BOTH, expand=True)
        
        # Aba de Log
        log_frame = tk.Frame(notebook, bg='#2c3e50')
        notebook.add(log_frame, text="Log de Execu√ß√£o")
        
        # Log principal
        self.log_text = scrolledtext.ScrolledText(log_frame,
                                                 font=('Consolas', 10),
                                                 bg='#2c3e50', fg='#ecf0f1',
                                                 relief=tk.FLAT, bd=0)
        self.log_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Aba de Dados
        data_frame = tk.Frame(notebook, bg='#2c3e50')
        notebook.add(data_frame, text="Dados Extra√≠dos")
        
        # Treeview para dados com checkbox
        columns = ('selecionado', 'arquivo', 'pagina', 'cliente', 'valor', 'vencimento', 'turma')
        self.data_tree = ttk.Treeview(data_frame, columns=columns, show='headings', height=15)
        
        # Configurar colunas
        self.data_tree.heading('selecionado', text='‚úì')
        self.data_tree.heading('arquivo', text='Arquivo')
        self.data_tree.heading('pagina', text='P√°gina')
        self.data_tree.heading('cliente', text='Cliente')
        self.data_tree.heading('valor', text='Valor')
        self.data_tree.heading('vencimento', text='Vencimento')
        self.data_tree.heading('turma', text='Turma')
        
        self.data_tree.column('selecionado', width=30, anchor='center')
        self.data_tree.column('arquivo', width=150)
        self.data_tree.column('pagina', width=60, anchor='center')
        self.data_tree.column('cliente', width=200)
        self.data_tree.column('valor', width=100)
        self.data_tree.column('vencimento', width=100)
        self.data_tree.column('turma', width=80)
        
        # Configurar evento de clique para alternar checkbox
        self.data_tree.bind('<Button-1>', self.on_tree_click)
        
        # Dicion√°rio para armazenar estado dos checkboxes
        self.checkbox_states = {}
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(data_frame, orient=tk.VERTICAL, command=self.data_tree.yview)
        self.data_tree.configure(yscrollcommand=scrollbar.set)
        
        self.data_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(10, 0), pady=10)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=10)
        
        # Frame para bot√µes de sele√ß√£o
        selection_frame = tk.Frame(data_frame, bg='#2c3e50')
        selection_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # Bot√µes de sele√ß√£o
        tk.Button(selection_frame,
                 text="‚úì Selecionar Todos",
                 font=('Segoe UI', 9),
                 bg='#27ae60', fg='white',
                 relief=tk.FLAT, padx=10, pady=5,
                 command=self.select_all).pack(side=tk.LEFT, padx=(0, 5))
        
        tk.Button(selection_frame,
                 text="‚úó Desmarcar Todos",
                 font=('Segoe UI', 9),
                 bg='#e74c3c', fg='white',
                 relief=tk.FLAT, padx=10, pady=5,
                 command=self.deselect_all).pack(side=tk.LEFT, padx=(0, 5))
        
        tk.Button(selection_frame,
                 text="üîÑ Inverter Sele√ß√£o",
                 font=('Segoe UI', 9),
                 bg='#f39c12', fg='white',
                 relief=tk.FLAT, padx=10, pady=5,
                 command=self.invert_selection).pack(side=tk.LEFT)
        
    def log_message(self, message, level="INFO"):
        """Adiciona mensagem ao log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        color_map = {
            "INFO": "#3498db",
            "SUCCESS": "#27ae60", 
            "WARNING": "#f39c12",
            "ERROR": "#e74c3c"
        }
        
        color = color_map.get(level, "#ecf0f1")
        
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        
        # Colorir a √∫ltima linha
        last_line_start = self.log_text.index("end-2c linestart")
        last_line_end = self.log_text.index("end-1c")
        self.log_text.tag_add(level, last_line_start, last_line_end)
        self.log_text.tag_config(level, foreground=color)
        
    def browse_folder(self):
        """Abre di√°logo para selecionar pasta com PDFs"""
        # Usar o diret√≥rio atual da pasta boletos como inicial
        initial_dir = self.folder_var.get()
        if not os.path.exists(initial_dir):
            # Se a pasta boletos n√£o existe, usar o diret√≥rio do execut√°vel
            initial_dir = self.get_app_base_path()
        
        folder_path = filedialog.askdirectory(
            title="Selecionar pasta com PDFs dos boletos",
            initialdir=initial_dir
        )
        
        if folder_path:
            self.folder_var.set(folder_path)
            self.log_message(f"üìÅ Pasta selecionada: {folder_path}", "INFO")
    
    def extract_pdfs(self):
        """Extrai dados dos PDFs na pasta selecionada"""
        def extract_thread():
            try:
                folder_path = self.folder_var.get()
                self.log_message(f"Iniciando extra√ß√£o de PDFs da pasta: {folder_path}", "INFO")
                
                # Verificar se a pasta existe
                if not os.path.exists(folder_path):
                    os.makedirs(folder_path)
                    self.log_message(f"Pasta '{folder_path}' criada. Adicione os PDFs e execute novamente.", "WARNING")
                    return
                
                # Importar depend√™ncias necess√°rias
                import pdfplumber
                import re
                
                def extrair_dados_boleto_pagina(pdf_path, pagina_num, texto_pagina):
                    """Extrai dados de uma p√°gina espec√≠fica de um boleto PDF"""
                    # Nome do cliente (Pagador) - removendo CPF/CNPJ que vem depois
                    nome = re.search(r'Pagador:\s*(.+?)(?:\s+CPF\s*/\s*CNPJ|$)', texto_pagina)

                    # CPF/CNPJ - padr√£o espec√≠fico da institui√ß√£o
                    cpf_cnpj = ''
                    cpf_match = re.search(r'([\d]{3}\.[\d]{3}\.[\d]{3}-[\d]{2})', texto_pagina)
                    if cpf_match:
                        cpf_cnpj = cpf_match.group(1)

                    # Endere√ßo - extra√ß√£o separada com m√∫ltiplas estrat√©gias
                    endereco = ''
                    
                    # Estrat√©gia 1: Padr√£o original
                    endereco_match = re.search(r'CPF ?/ ?CNPJ[:\s]*[\d.\-/]+\s+(.+?PALMAS.*?)\s*-?\s*(\d{8})', texto_pagina)
                    if endereco_match:
                        endereco = f"{endereco_match.group(1)} - {endereco_match.group(2)}"
                    else:
                        # Estrat√©gia 2: Busca por PALMAS seguido de CEP
                        endereco_match = re.search(r'(.+?PALMAS.*?)\s*-?\s*(\d{5}-?\d{3})', texto_pagina)
                        if endereco_match:
                            endereco = f"{endereco_match.group(1)} - {endereco_match.group(2)}"
                        else:
                            # Estrat√©gia 3: Busca por qualquer padr√£o de CEP ap√≥s endere√ßo
                            endereco_match = re.search(r'(.+?)\s*(\d{5}-?\d{3})', texto_pagina)
                            if endereco_match:
                                endereco = f"{endereco_match.group(1)} - {endereco_match.group(2)}"
                            else:
                                # Estrat√©gia 4: Busca simples por CEP no texto
                                cep_match = re.search(r'(\d{5}-?\d{3})', texto_pagina)
                                if cep_match:
                                    endereco = f"Endere√ßo - {cep_match.group(1)}"

                    valor = re.search(r'Valor do Documento.*?(\d{1,3}(?:\.\d{3})*,\d{2})', texto_pagina, re.DOTALL)
                    vencimento = re.search(r'Local de Pagamento.*?(\d{2}/\d{2}/\d{4})', texto_pagina, re.DOTALL)
                    descricao = re.search(r'(MENSALIDADE:.*)', texto_pagina)
                    linha_digitavel = re.search(r'(\d{5}\.\d{5} \d{5}\.\d{6} \d{5}\.\d{6} \d \d{13,14}-?\d)', texto_pagina)

                    # Extrair turma
                    turma_match = re.search(r'TURMA[:\s]+([A-Z0-9]+)', texto_pagina)
                    turma = turma_match.group(1) if turma_match else ''

                    # Mapeamento CNAE e atividade
                    if turma.startswith('J'):
                        cnae = '8513900'
                        atividade = '0801'
                    elif turma.startswith('G'):
                        cnae = '8520100'
                        atividade = '0801'
                    else:
                        cnae = ''
                        atividade = ''

                    dados = {
                        'arquivo_pdf': os.path.basename(pdf_path),
                        'pagina': pagina_num,
                        'nome_cliente': nome.group(1).strip() if nome else '',
                        'cpf_cnpj': cpf_cnpj,
                        'endereco': endereco.strip(),
                        'valor': valor.group(1).replace('.', '').replace(',', '.') if valor else '',
                        'vencimento': vencimento.group(1) if vencimento else '',
                        'descricao': descricao.group(1).strip() if descricao else 'servi√ßos educacionais',
                        'linha_digitavel': linha_digitavel.group(1) if linha_digitavel else '',
                        'turma': turma,
                        'cnae': cnae,
                        'atividade': atividade
                    }

                    return dados

                def extrair_dados_boleto(pdf_path):
                    """Extrai dados de um boleto PDF, processando cada p√°gina separadamente"""
                    dados_paginas = []
                    
                    with pdfplumber.open(pdf_path) as pdf:
                        total_paginas = len(pdf.pages)
                        self.log_message(f"üìÑ Processando {total_paginas} p√°gina(s) do arquivo: {os.path.basename(pdf_path)}", "INFO")
                        
                        for pagina_num, page in enumerate(pdf.pages, 1):
                            try:
                                texto_pagina = page.extract_text()
                                
                                # Verificar se a p√°gina cont√©m dados de boleto
                                if texto_pagina and ('Pagador:' in texto_pagina or 'Valor do Documento' in texto_pagina):
                                    dados = extrair_dados_boleto_pagina(pdf_path, pagina_num, texto_pagina)
                                    
                                    # Verificar se extraiu dados v√°lidos
                                    if dados['nome_cliente'] or dados['valor']:
                                        dados_paginas.append(dados)
                                        self.log_message(f"  ‚úÖ P√°gina {pagina_num}: {dados['nome_cliente']} - R$ {dados['valor']}", "SUCCESS")
                                    else:
                                        self.log_message(f"  ‚ö†Ô∏è P√°gina {pagina_num}: Dados insuficientes, ignorando", "WARNING")
                                else:
                                    self.log_message(f"  ‚ö†Ô∏è P√°gina {pagina_num}: N√£o parece ser um boleto, ignorando", "WARNING")
                                    
                            except Exception as e:
                                self.log_message(f"  ‚ùå Erro ao processar p√°gina {pagina_num}: {e}", "ERROR")
                    
                    return dados_paginas

                # Processar PDFs
                arquivos = [f for f in os.listdir(folder_path) if f.lower().endswith('.pdf')]

                if not arquivos:
                    self.log_message(f"Nenhum PDF encontrado na pasta: {folder_path}", "WARNING")
                    return

                todos_dados = []
                total_boletos = 0

                for arquivo in arquivos:
                    caminho = os.path.join(folder_path, arquivo)
                    self.log_message(f"üìÑ Extraindo dados de: {arquivo}", "INFO")
                    try:
                        dados_paginas = extrair_dados_boleto(caminho)
                        todos_dados.extend(dados_paginas)
                        total_boletos += len(dados_paginas)
                        self.log_message(f"‚úÖ {len(dados_paginas)} boleto(s) extra√≠do(s) de {arquivo}", "SUCCESS")
                    except Exception as e:
                        self.log_message(f"‚ùå Erro ao processar {arquivo}: {e}", "ERROR")

                if todos_dados:
                    df = pd.DataFrame(todos_dados)
                    
                    # Gerar estat√≠sticas
                    estatisticas = self.gerar_estatisticas_pdfs(df, arquivos)
                    
                    # Salvar no diret√≥rio do execut√°vel
                    csv_path = os.path.join(self.get_app_base_path(), 'boletos_extraidos.csv')
                    df.to_csv(csv_path, index=False, encoding='utf-8', sep=';')
                    
                    # Exibir estat√≠sticas
                    self.log_message(f"‚úÖ Dados extra√≠dos de {total_boletos} boletos ({len(arquivos)} arquivos) e salvos em {csv_path}", "SUCCESS")
                    self.log_message(f"üìä Estat√≠sticas: {estatisticas}", "INFO")
                    self.update_data_status(True)
                else:
                    self.log_message("‚ùå Nenhum dado extra√≠do.", "WARNING")
                    
            except Exception as e:
                self.log_message(f"‚ùå Erro durante extra√ß√£o: {e}", "ERROR")
        
        threading.Thread(target=extract_thread, daemon=True).start()
    
    def gerar_estatisticas_pdfs(self, df, arquivos):
        """Gera estat√≠sticas sobre os PDFs processados"""
        try:
            # Estat√≠sticas por arquivo
            stats_por_arquivo = df.groupby('arquivo_pdf').agg({
                'pagina': ['count', 'min', 'max'],
                'valor': 'sum'
            }).round(2)
            
            # Contar arquivos com m√∫ltiplas p√°ginas
            arquivos_multiplas_paginas = 0
            total_paginas_multiplas = 0
            
            for arquivo in arquivos:
                dados_arquivo = df[df['arquivo_pdf'] == arquivo]
                if len(dados_arquivo) > 1:
                    arquivos_multiplas_paginas += 1
                    total_paginas_multiplas += len(dados_arquivo)
            
            # Estat√≠sticas gerais
            total_arquivos = len(arquivos)
            total_boletos = len(df)
            valor_total = df['valor'].astype(float).sum()
            
            estatisticas = {
                'total_arquivos': total_arquivos,
                'total_boletos': total_boletos,
                'arquivos_com_multiplas_paginas': arquivos_multiplas_paginas,
                'total_paginas_multiplas': total_paginas_multiplas,
                'valor_total': f"R$ {valor_total:,.2f}",
                'media_boletos_por_arquivo': round(total_boletos / total_arquivos, 2) if total_arquivos > 0 else 0
            }
            
            # Formatar mensagem
            msg = f"{total_arquivos} arquivo(s), {total_boletos} boleto(s) total"
            if arquivos_multiplas_paginas > 0:
                msg += f", {arquivos_multiplas_paginas} arquivo(s) com m√∫ltiplas p√°ginas ({total_paginas_multiplas} p√°ginas)"
            msg += f", valor total: {estatisticas['valor_total']}"
            
            return msg
            
        except Exception as e:
            return f"Erro ao gerar estat√≠sticas: {e}"
    
    def load_data(self):
        """Carrega dados do CSV"""
        try:
            # Determinar o caminho do arquivo CSV baseado no diret√≥rio do execut√°vel
            csv_path = os.path.join(self.get_app_base_path(), 'boletos_extraidos.csv')
            
            if not os.path.exists(csv_path):
                self.log_message(f"‚ùå Arquivo boletos_extraidos.csv n√£o encontrado em: {csv_path}", "ERROR")
                self.log_message("üìÑ Execute primeiro a extra√ß√£o de PDFs da pasta selecionada", "WARNING")
                return
            
            # Carregar dados
            df = pd.read_csv(csv_path, sep=';', encoding='utf-8')
            
            if df.empty:
                self.log_message("‚ùå Nenhum dado encontrado no CSV!", "ERROR")
                return
            
            self.current_data = df
            self.update_data_display(df)
            self.update_data_status(True)
            
            self.log_message(f"‚úÖ Dados carregados: {len(df)} registros", "SUCCESS")
            self.log_message("üìã Selecione os boletos que deseja processar clicando nos checkboxes", "INFO")
            self.log_message("üí° Use os bot√µes 'Selecionar Todos', 'Desmarcar Todos' ou 'Inverter Sele√ß√£o'", "INFO")
            
        except Exception as e:
            self.log_message(f"‚ùå Erro ao carregar dados: {e}", "ERROR")
        finally:
            self.log_message("üìù A√ß√£o de carregar dados finalizada.", "INFO")
    
    def update_data_display(self, df):
        """Atualiza a exibi√ß√£o dos dados"""
        # Limpar treeview e estados
        for item in self.data_tree.get_children():
            self.data_tree.delete(item)
        self.checkbox_states.clear()
        
        # Adicionar dados com checkboxes
        for index, (_, row) in enumerate(df.iterrows()):
            item_id = self.data_tree.insert('', tk.END, values=(
                '‚òê',  # Checkbox vazio
                row.get('arquivo_pdf', ''),
                row.get('pagina', ''),
                row.get('nome_cliente', ''),
                f"R$ {row.get('valor', '0')}",
                row.get('vencimento', ''),
                row.get('turma', '')
            ))
            # Inicializar estado do checkbox como desmarcado
            self.checkbox_states[item_id] = False
    
    def on_tree_click(self, event):
        """Manipula cliques no treeview para alternar checkboxes"""
        region = self.data_tree.identify("region", event.x, event.y)
        if region == "heading":
            return
        
        item = self.data_tree.identify_row(event.y)
        if not item:
            return
        
        column = self.data_tree.identify_column(event.x)
        if column == '#1':  # Coluna do checkbox
            # Obter dados do item antes de alterar
            item_values = self.data_tree.item(item, 'values')
            nome_cliente = item_values[3] if len(item_values) > 3 else 'N/A'
            
            # Alternar estado do checkbox
            current_state = self.checkbox_states.get(item, False)
            new_state = not current_state
            self.checkbox_states[item] = new_state
            
            # Atualizar visual do checkbox
            values = list(self.data_tree.item(item, 'values'))
            values[0] = '‚òë' if new_state else '‚òê'
            self.data_tree.item(item, values=values)
            
            # Log detalhado do clique
            self.log_message(f"üñ±Ô∏è Clique no checkbox: {nome_cliente} - Estado: {current_state} ‚Üí {new_state}", "INFO")
            
            # Atualizar contador de selecionados
            self.update_selection_count()
    

    
    def select_all(self):
        """Seleciona todos os boletos"""
        for item in self.data_tree.get_children():
            self.checkbox_states[item] = True
            values = list(self.data_tree.item(item, 'values'))
            values[0] = '‚òë'
            self.data_tree.item(item, values=values)
        self.update_selection_count()
        self.log_message("‚úÖ Todos os boletos selecionados", "SUCCESS")
    
    def deselect_all(self):
        """Desmarca todos os boletos"""
        for item in self.data_tree.get_children():
            self.checkbox_states[item] = False
            values = list(self.data_tree.item(item, 'values'))
            values[0] = '‚òê'
            self.data_tree.item(item, values=values)
        self.update_selection_count()
        self.log_message("‚ùå Todos os boletos desmarcados", "WARNING")
    
    def invert_selection(self):
        """Inverte a sele√ß√£o atual"""
        for item in self.data_tree.get_children():
            current_state = self.checkbox_states.get(item, False)
            self.checkbox_states[item] = not current_state
            values = list(self.data_tree.item(item, 'values'))
            values[0] = '‚òë' if self.checkbox_states[item] else '‚òê'
            self.data_tree.item(item, values=values)
        self.update_selection_count()
        self.log_message("üîÑ Sele√ß√£o invertida", "INFO")
    
    def update_selection_count(self):
        """Atualiza o contador de boletos selecionados"""
        selected_count = sum(1 for state in self.checkbox_states.values() if state)
        total_count = len(self.checkbox_states)
        
        # Log detalhado dos itens selecionados
        if selected_count > 0:
            selected_items = []
            for item, state in self.checkbox_states.items():
                if state:
                    item_values = self.data_tree.item(item, 'values')
                    nome_cliente = item_values[3] if len(item_values) > 3 else 'N/A'
                    selected_items.append(nome_cliente)
            
            self.log_message(f"üìä {selected_count}/{total_count} boletos selecionados: {', '.join(selected_items)}", "INFO")
        else:
            self.log_message(f"üìä {selected_count}/{total_count} boletos selecionados", "INFO")
    
    def get_selected_data(self):
        """Retorna apenas os dados dos boletos selecionados"""
        if self.current_data is None:
            return None
        
        selected_indices = []
        tree_items = self.data_tree.get_children()
        
        # Log detalhado para debug
        self.log_message(f"üîç Verificando sele√ß√£o: {len(tree_items)} itens na √°rvore", "INFO")
        
        # Criar mapeamento entre item da √°rvore e √≠ndice do DataFrame
        # Usar os dados do item da √°rvore para encontrar o √≠ndice correto no DataFrame
        for i, item in enumerate(tree_items):
            checkbox_state = self.checkbox_states.get(item, False)
            
            # Obter dados do item da √°rvore
            item_values = self.data_tree.item(item, 'values')
            nome_cliente = item_values[3] if len(item_values) > 3 else ''
            arquivo = item_values[1] if len(item_values) > 1 else ''
            pagina = item_values[2] if len(item_values) > 2 else ''
            
            self.log_message(f"  Item {i}: {item} - Cliente: {nome_cliente} - Selecionado: {checkbox_state}", "INFO")
            
            if checkbox_state:
                # Encontrar o √≠ndice correto no DataFrame baseado nos dados
                # Procurar por correspond√™ncia exata
                matching_indices = []
                for idx, (_, row) in enumerate(self.current_data.iterrows()):
                    if (row.get('nome_cliente', '') == nome_cliente and 
                        row.get('arquivo_pdf', '') == arquivo and 
                        str(row.get('pagina', '')) == str(pagina)):
                        matching_indices.append(idx)
                
                if matching_indices:
                    # Usar o primeiro √≠ndice encontrado
                    selected_indices.append(matching_indices[0])
                    self.log_message(f"  ‚úÖ Adicionado √≠ndice {matching_indices[0]} para cliente: {nome_cliente}", "INFO")
                else:
                    # Fallback: usar √≠ndice baseado na posi√ß√£o (comportamento anterior)
                    selected_indices.append(i)
                    self.log_message(f"  ‚ö†Ô∏è Usando √≠ndice fallback {i} para cliente: {nome_cliente}", "WARNING")
        
        if not selected_indices:
            self.log_message("‚ùå Nenhum boleto selecionado!", "ERROR")
            return None
        
        # Log para debug
        self.log_message(f"üìã √çndices selecionados: {selected_indices}", "INFO")
        
        selected_data = self.current_data.iloc[selected_indices]
        self.log_message(f"‚úÖ {len(selected_data)} boletos selecionados para processamento", "SUCCESS")
        
        # Log dos dados selecionados
        for i, (_, row) in enumerate(selected_data.iterrows()):
            self.log_message(f"  Boleto {i+1}: {row.get('nome_cliente', 'N/A')}", "INFO")
        
        return selected_data
        

    
    def update_data_status(self, loaded):
        """Atualiza status dos dados"""
        if loaded:
            self.data_status_label.config(text="‚úÖ Dados carregados", fg='#27ae60')
        else:
            self.data_status_label.config(text="‚ùå Dados n√£o carregados", fg='#e74c3c')
    
    def update_webiss_status(self, connected):
        """Atualiza status do WebISS"""
        if connected:
            self.webiss_status_label.config(text="‚úÖ WebISS conectado", fg='#27ae60')
        else:
            self.webiss_status_label.config(text="‚ùå WebISS n√£o conectado", fg='#e74c3c')
    
    def update_license_status(self):
        """Atualiza informa√ß√µes da licen√ßa"""
        try:
            from utils.license_checker import LicenseChecker
            license_checker = LicenseChecker()
            info = license_checker.obter_info_licenca()
            
            if info:
                self.license_status_label.config(
                    text=f"‚úÖ Licen√ßa v√°lida - {info['dias_restantes']} dias restantes",
                    fg='#27ae60'
                )
                self.license_info_label.config(
                    text=f"Cliente: {info['cliente']} | Expira: {info['data_expiracao']} | Vers√£o: {info['versao']}"
                )
            else:
                self.license_status_label.config(
                    text="‚ùå Licen√ßa n√£o encontrada",
                    fg='#e74c3c'
                )
                self.license_info_label.config(text="")
                
        except Exception as e:
            self.license_status_label.config(
                text="‚ùå Erro ao verificar licen√ßa",
                fg='#e74c3c'
            )
            self.license_info_label.config(text="")
    
    def connect_webiss(self):
        """Conecta ao WebISS"""
        def connect_thread():
            try:
                self.log_message("Conectando ao WebISS...", "INFO")
                self.automation = self.webiss_automation(self.settings)
                if not self.automation.setup_driver():
                    self.log_message("‚ùå Falha ao configurar driver", "ERROR")
                    return
                if not self.automation.login():
                    self.log_message("‚ùå Falha no login", "ERROR")
                    return
                self.update_webiss_status(True)
                self.log_message("‚úÖ Conectado ao WebISS com sucesso!", "SUCCESS")
            except Exception as e:
                self.log_message(f"‚ùå Erro ao conectar: {e}", "ERROR")
        threading.Thread(target=connect_thread, daemon=True).start()
    
    def start_automation(self):
        """Inicia a automa√ß√£o completa"""
        self.log_message("üöÄ Iniciando automa√ß√£o...", "INFO")
        
        if self.current_data is None:
            self.log_message("‚ùå Carregue os dados primeiro!", "ERROR")
            return
        
        self.log_message(f"üìä Dados carregados: {len(self.current_data)} registros", "INFO")
        
        if not self.automation:
            self.log_message("‚ùå Conecte ao WebISS primeiro!", "ERROR")
            return
        
        self.log_message("‚úÖ WebISS conectado", "INFO")
        
        # Verificar se h√° boletos selecionados
        self.log_message("üîç Verificando boletos selecionados...", "INFO")
        
        # Log do estado dos checkboxes antes de chamar get_selected_data
        tree_items = self.data_tree.get_children()
        self.log_message(f"üìã Total de itens na √°rvore: {len(tree_items)}", "INFO")
        
        selected_count = 0
        for i, item in enumerate(tree_items):
            checkbox_state = self.checkbox_states.get(item, False)
            if checkbox_state:
                selected_count += 1
                item_values = self.data_tree.item(item, 'values')
                nome_cliente = item_values[3] if len(item_values) > 3 else 'N/A'
                self.log_message(f"  ‚úÖ Item {i} selecionado: {nome_cliente}", "INFO")
        
        self.log_message(f"üìä Total de itens selecionados na interface: {selected_count}", "INFO")
        
        selected_data = self.get_selected_data()
        if selected_data is None:
            self.log_message("‚ùå Nenhum boleto selecionado!", "ERROR")
            return
        
        # Log adicional para debug
        self.log_message(f"üìä Dados selecionados: {len(selected_data)} boletos", "INFO")
        self.log_message(f"üìã √çndices dos dados: {list(selected_data.index)}", "INFO")
        
        def automation_thread():
            try:
                self.log_message("üîÑ Iniciando thread de automa√ß√£o...", "INFO")
                self.processing = True
                self.update_ui_state()
                # Processar todos os boletos
                self.process_all_boletos()
            except Exception as e:
                self.log_message(f"‚ùå Erro durante a automa√ß√£o: {e}", "ERROR")
                import traceback
                self.log_message(f"‚ùå Traceback: {traceback.format_exc()}", "ERROR")
            finally:
                self.processing = False
                self.update_ui_state()
                self.log_message("üèÅ Thread de automa√ß√£o finalizada", "INFO")
        
        self.log_message("üîÑ Iniciando thread de automa√ß√£o...", "INFO")
        threading.Thread(target=automation_thread, daemon=True).start()
    
    def process_all_boletos(self):
        """Processa apenas os boletos selecionados"""
        # Obter dados selecionados
        self.log_message("üîÑ Obtendo dados selecionados em process_all_boletos...", "INFO")
        selected_data = self.get_selected_data()
        if selected_data is None:
            self.log_message("‚ùå Nenhum dado selecionado em process_all_boletos", "ERROR")
            return
        
        total_boletos = len(selected_data)
        self.log_message(f"üöÄ Iniciando processamento de {total_boletos} boletos selecionados", "INFO")
        self.log_message(f"üìã √çndices dos dados em process_all_boletos: {list(selected_data.index)}", "INFO")
        
        # Criar lista de tuplas (√≠ndice_real, row) para manter os √≠ndices originais
        boletos_para_processar = []
        self.log_message("üîß Criando lista de boletos para processar...", "INFO")
        for idx, (_, row) in enumerate(selected_data.iterrows()):
            # Obter o √≠ndice real do DataFrame
            indice_real = selected_data.index[idx]
            boletos_para_processar.append((indice_real, row))
            self.log_message(f"üìã Adicionado boleto {idx+1}: √≠ndice {indice_real}, cliente: {row.get('nome_cliente', 'N/A')}", "INFO")
        
        self.log_message(f"‚úÖ Lista criada com {len(boletos_para_processar)} boletos", "INFO")
        
        for posicao, (indice_real, row) in enumerate(boletos_para_processar, 1):
            if not self.processing:  # Verificar se foi interrompido
                self.log_message("‚èπÔ∏è Processamento interrompido", "WARNING")
                break
            
            self.log_message(f"=== PROCESSANDO BOLETO {posicao}/{total_boletos} (√çndice original: {indice_real}) ===", "INFO")
            
            # Processar um boleto
            success = self.process_single_boleto(row, posicao, total_boletos, indice_real)
            
            if success:
                self.log_message(f"‚úÖ Boleto {posicao} processado com sucesso!", "SUCCESS")
            else:
                self.log_message(f"‚ùå Erro ao processar boleto {posicao}", "ERROR")
                continue
        
        self.log_message("üéâ Processamento dos boletos selecionados conclu√≠do!", "SUCCESS")
    
    def process_single_boleto(self, row_data, posicao, total_boletos, indice_real=None):
        """Processa um √∫nico boleto"""
        try:
            import time
            # Preparar dados do boleto
            test_data = row_data.to_dict()
            
            # Log do √≠ndice real para debug
            if indice_real is not None:
                self.log_message(f"üìã Processando boleto com √≠ndice original: {indice_real}", "INFO")
            
            # Extrair turma do campo descri√ß√£o
            turma = ''
            if 'descricao' in test_data and test_data['descricao']:
                import re
                turma_match = re.search(r'TURMA:\s*([A-Z0-9]+)', test_data['descricao'])
                if turma_match:
                    turma = turma_match.group(1)
            
            # Preparar dados para o teste
            processed_data = {
                'cpf_cnpj': test_data.get('cpf_cnpj', '').replace('.', '').replace('-', ''),
                'nome_cliente': test_data.get('nome_cliente', ''),
                'endereco': test_data.get('endereco', ''),
                'valor': test_data.get('valor', ''),
                'vencimento': test_data.get('vencimento', ''),
                'descricao': test_data.get('descricao', ''),
                'turma': turma
            }
            
            # Extrair CEP do endere√ßo se dispon√≠vel (m√∫ltiplas estrat√©gias)
            if 'endereco' in processed_data and processed_data['endereco']:
                import re
                
                # Estrat√©gia 1: CEP no formato padr√£o (5 d√≠gitos + h√≠fen + 3 d√≠gitos)
                cep_match = re.search(r'(\d{5})-?(\d{3})', processed_data['endereco'])
                if cep_match:
                    processed_data['cep'] = f"{cep_match.group(1)}-{cep_match.group(2)}"
                    self.log_message(f"‚úÖ CEP extra√≠do do endere√ßo: {processed_data['cep']}", "INFO")
                else:
                    # Estrat√©gia 2: CEP sem h√≠fen (8 d√≠gitos consecutivos)
                    cep_match = re.search(r'(\d{8})', processed_data['endereco'])
                    if cep_match:
                        cep = cep_match.group(1)
                        processed_data['cep'] = f"{cep[:5]}-{cep[5:]}"
                        self.log_message(f"‚úÖ CEP extra√≠do do endere√ßo (sem h√≠fen): {processed_data['cep']}", "INFO")
                    else:
                        # Estrat√©gia 3: Buscar CEP em qualquer lugar do texto
                        cep_match = re.search(r'(\d{5})[.\-\s]*(\d{3})', processed_data['endereco'])
                        if cep_match:
                            processed_data['cep'] = f"{cep_match.group(1)}-{cep_match.group(2)}"
                            self.log_message(f"‚úÖ CEP extra√≠do do endere√ßo (padr√£o alternativo): {processed_data['cep']}", "INFO")
                        else:
                            self.log_message(f"‚ö†Ô∏è CEP n√£o encontrado no endere√ßo: {processed_data['endereco']}", "WARNING")
                            # Tentar extrair do texto completo se dispon√≠vel
                            if 'descricao' in processed_data and processed_data['descricao']:
                                cep_match = re.search(r'(\d{5})-?(\d{3})', processed_data['descricao'])
                                if cep_match:
                                    processed_data['cep'] = f"{cep_match.group(1)}-{cep_match.group(2)}"
                                    self.log_message(f"‚úÖ CEP extra√≠do da descri√ß√£o: {processed_data['cep']}", "INFO")
            else:
                self.log_message("‚ö†Ô∏è Endere√ßo n√£o dispon√≠vel para extrair CEP", "WARNING")
            
            # Log dos dados processados para debug
            self.log_message(f"Dados processados: {processed_data}", "INFO")
            
            self.log_message(f"Processando: {processed_data['nome_cliente']}", "INFO")
            
            # Navegar para nova NFSe apenas no primeiro boleto
            if posicao == 1:  # Primeiro boleto
                self.log_message("üîÑ Primeiro boleto - navegando para nova NFSe...", "INFO")
                if not self.automation.navigate_to_new_nfse():
                    self.log_message("‚ùå Falha ao navegar para nova NFSe", "ERROR")
                    return False
                time.sleep(1)  # Aguardar carregamento completo
            else:
                self.log_message(f"üîÑ Boleto {posicao} - usando nota j√° criada...", "INFO")
                # Para os demais boletos, n√£o navegar aqui - apenas ap√≥s emitir a nota anterior

            # Preencher formul√°rio do tomador (Step 2)
            self.log_message("=== PREENCHENDO STEP 2 - TOMADOR ===", "INFO")
            if not self.automation.fill_nfse_form(processed_data):
                self.log_message("‚ùå Falha ao preencher formul√°rio do tomador", "ERROR")
                return False
            
            # Avan√ßar para Step 3
            self.log_message("=== AVAN√áANDO PARA STEP 3 ===", "INFO")
            if not self.automation.click_proximo():
                self.log_message("‚ùå Falha ao avan√ßar para Step 3", "ERROR")
                return False
            
            # Aguardar carregamento do Step 3
            time.sleep(1)
            
            # Preencher Step 3 usando a fun√ß√£o sem scroll
            self.log_message("=== PREENCHENDO STEP 3 SEM SCROLL ===", "INFO")
            if not self.automation.fill_nfse_servicos_sem_scroll(processed_data):
                self.log_message("‚ùå Falha ao preencher Step 3 sem scroll", "ERROR")
                return False
            
            # Aguardar um pouco para garantir que tudo foi processado
            time.sleep(1)
            
            # Avan√ßar para Step 4
            self.log_message("=== AVAN√áANDO PARA STEP 4 ===", "INFO")
            if not self.automation.click_proximo():
                self.log_message("‚ùå Falha ao avan√ßar para Step 4", "ERROR")
                return False
            
            # Aguardar carregamento do Step 4
            time.sleep(1)
            
            # Preencher Step 4 (valores)
            self.log_message("=== PREENCHENDO STEP 4 - VALORES ===", "INFO")
            if not self.automation.fill_nfse_valores(processed_data):
                self.log_message("‚ùå Falha ao preencher Step 4", "ERROR")
                return False

            # Clicar em Salvar rascunho
            self.log_message("üíæ Salvando rascunho da nota...", "INFO")
            if not self.automation.salvar_rascunho():
                self.log_message("‚ùå Falha ao salvar rascunho", "ERROR")
                return False

            # Aguardar um pouco para o rascunho ser salvo
            time.sleep(2)

            # Clicar em Emitir nota fiscal
            self.log_message("üöÄ Emitindo nota fiscal...", "INFO")
            if not self.automation.emitir_nota_fiscal():
                self.log_message("‚ùå Falha ao emitir nota fiscal", "ERROR")
                return False

            # Aguardar emiss√£o da nota
            time.sleep(3)

            # Clicar em "Criar" para preparar a pr√≥xima nota (apenas se n√£o for o √∫ltimo boleto)
            if posicao < total_boletos:  # Se n√£o for o √∫ltimo boleto
                self.log_message("üîÑ Preparando pr√≥xima nota...", "INFO")
                if not self.automation.navegar_para_proxima_nota():
                    self.log_message("‚ùå Falha ao preparar pr√≥xima nota", "ERROR")
                    return False  # Falhar se n√£o conseguir preparar pr√≥xima nota
                self.log_message("‚úÖ Pr√≥xima nota preparada", "SUCCESS")

            self.log_message("‚úÖ Boleto processado e nota emitida com sucesso!", "SUCCESS")
            return True
        except Exception as e:
            self.log_message(f"‚ùå Erro durante processamento do boleto: {e}", "ERROR")
            return False

    
    def stop_automation(self):
        """Para a automa√ß√£o"""
        self.processing = False
        self.update_ui_state()
        self.log_message("‚èπÔ∏è Processamento interrompido pelo usu√°rio", "WARNING")
    
    def update_ui_state(self):
        """Atualiza estado da interface"""
        if self.processing:
            self.start_button.config(state=tk.DISABLED)
            self.stop_button.config(state=tk.NORMAL)
            self.extract_button.config(state=tk.DISABLED)
            self.load_button.config(state=tk.DISABLED)
            self.connect_button.config(state=tk.DISABLED)
        else:
            self.start_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)
            self.extract_button.config(state=tk.NORMAL)
            self.load_button.config(state=tk.NORMAL)
            self.connect_button.config(state=tk.NORMAL)
    
    def run(self):
        """Executa a interface"""
        self.log_message("Interface iniciada com sucesso!", "SUCCESS")
        self.log_message("Siga os passos: 1) Extrair PDFs 2) Carregar Dados 3) Conectar WebISS 4) Iniciar Automa√ß√£o", "INFO")
        
        # Atualizar status da licen√ßa
        self.update_license_status()
        
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            self.log_message("Interrompido pelo usu√°rio", "WARNING")
        finally:
            if self.automation:
                try:
                    self.automation.close()
                    self.log_message("Navegador fechado", "INFO")
                except:
                    pass 